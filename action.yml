name: "Go Frontend Audit Script Action"
description: "Runs a go script to audit a given repository"

inputs:
  token:
    description: "GitHub token to add commits to pull request."
    required: true

runs:
  using: composite
  steps:
    - name: Run Go Audit Scrip
      uses: docker://yonatanrojas/frontendauditscript:latest

    - name: Post PR Comment
      uses: actions/github-script@v6
      # env:
      # REACT_VERSION_EVAL_NAME: ${{ env.REACT_VERSION_EVAL_NAME }}
      # REACT_VERSION_SCORE: ${{ env.REACT_VERSION_SCORE }}
      # REACT_VERSION_MAX_SCORE: ${{ env.REACT_VERSION_MAX_SCORE }}
      # REACT_VERSION_MIX_SCORE: ${{ env.REACT_VERSION_MIX_SCORE }}
      # REACT_VERSION_WEIGT: ${{ env.REACT_VERSION_WEIGT }}
      #
      # ICON_LIBS_EVAL_NAME: ${{ env.ICON_LIBS_EVAL_NAME }}
      # ICON_LIBS_SCORE: ${{ env.ICON_LIBS_SCORE }}
      # ICON_LIBS_MAX_SCORE: ${{ env.ICON_LIBS_MAX_SCORE }}
      # ICON_LIBS_MIN_SCORE: ${{ env.ICON_LIBS_MIN_SCORE }}
      # ICON_LIBS_WEIGHT: ${{ env.ICON_LIBS_WEIGHT }}
      #
      # MUI_EXTRA_LIBS_EVAL_NAME: ${{ env.MUI_EXTRA_LIBS_EVAL_NAME }}
      # MUI_EXTRA_LIBS_SCORE: ${{ env.MUI_EXTRA_LIBS_SCORE }}
      # MUI_EXTRA_LIBS_MAX_SCORE: ${{ env.MUI_EXTRA_LIBS_MAX_SCORE }}
      # MUI_EXTRA_LIBS_MIN_SCORE: ${{ env.MUI_EXTRA_LIBS_MIN_SCORE }}
      # MUI_EXTRA_LIBS_WEIGHT: ${{ env.MUI_EXTRA_LIBS_WEIGHT }}
      #
      # STYLING_LIBS_EVAL_NAME: ${{ env.STYLING_LIBS_EVAL_NAME }}
      # STYLING_LIBS_SCORE: ${{ env.STYLING_LIBS_SCORE }}
      # STYLING_LIBS_MAX_SCORE: ${{ env.STYLING_LIBS_MAX_SCORE }}
      # STYLING_LIBS_MIN_SCORE: ${{ env.STYLING_LIBS_MIN_SCORE }}
      # STYLING_LIBS_WEIGHT: ${{ env.STYLING_LIBS_WEIGHT }}
      #
      # THEME_PROVIDERS_EVAL_NAME: ${{ env.THEME_PROVIDERS_EVAL_NAME }}
      # THEME_PROVIDERS_SCORE: ${{ env.THEME_PROVIDERS_SCORE }}
      # THEME_PROVIDERS_MAX_SCORE: ${{ env.THEME_PROVIDERS_MAX_SCORE }}
      # THEME_PROVIDERS_MIN_SCORE: ${{ env.THEME_PROVIDERS_MIN_SCORE }}
      # THEME_PROVIDERS_WEIGHT: ${{ env.THEME_PROVIDERS_WEIGHT }}
      #
      # WEB_FONTS_EVAL_NAME: ${{ env.WEB_FONTS_EVAL_NAME }}
      # WEB_FONTS_SCORE: ${{ env.WEB_FONTS_SCORE }}
      # WEB_FONTS_MAX_SCORE: ${{ env.WEB_FONTS_MAX_SCORE }}
      # WEB_FONTS_MIN_SCORE: ${{ env.WEB_FONTS_MIN_SCORE }}
      # WEB_FONTS_WEIGHT: ${{ env.WEB_FONTS_WEIGHT }}
      #
      # ASSETS_EVAL_NAME: ${{ env.ASSETS_EVAL_NAME }}
      # ASSETS_SCORE: ${{ env.ASSETS_SCORE }}
      # ASSETS_MAX_SCORE: ${{ env.ASSETS_MAX_SCORE }}
      # ASSETS_MIN_SCORE: ${{ env.ASSETS_MIN_SCORE }}
      # ASSETS_WEIGHT: ${{ env.ASSETS_WEIGHT }}
      #
      # EVALUATION_TOTAL_SCORE: ${{ env.EVALUATION_TOTAL_SCORE }}
      with:
        github-token: ${{ inputs.token }}
        script: |
          const uniqueIdentifier = "<!-- quality-report-comment -->";

          const reactEvalName = process.env.REACT_VERSION_EVAL_NAME
          const reactEvalScore = process.env.REACT_VERSION_SCORE
          const finalScore = process.env.EVALUATION_TOTAL_SCORE

          const table = `
              | **Metric**       | **Score**  |
              |-------------------|:------------:|
              | üßπ Evaluation Name           | ${reactEvalName} / 30 |
              | üìà React EvalScore       | ${reactEvalScore} / 70 |
              | ‚≠ê **Final**       | **${finalScore}** / 100 |

            ${uniqueIdentifier} <!-- Hidden identifier -->
          `;

          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });

          console.log("--------DATA--------", comments)
          const existingComment = comments.find(comment => comment.body.includes(uniqueIdentifier));

          if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: table
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: table
              });
            }
